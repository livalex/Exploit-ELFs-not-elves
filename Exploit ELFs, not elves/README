				       _____________,--,
				      | | | | | | |/ .-.\   HANG IN THERE
				      |_|_|_|_|_|_/ /   `.      SANTA
				       |_|__|__|_; |      \
				       |___|__|_/| |     .'`}
				       |_|__|__/ | |   .'.'`\
				       |__|__|/  ; ;  / /    \.-"-.
				       ||__|_;   \ \  ||    /`___. \
				       |_|___/\  /;.`,\\   {_'___.;{}
				       |__|_/ `;`__|`-.;|  |C` e e`\
				       |___`L  \__|__|__|  | `'-o-' }
				       ||___|\__)___|__||__|\   ^  /`\
				       |__|__|__|__|__|_{___}'.__.`\_.'}
				       ||___|__|__|__|__;\_)-'`\   {_.-;
				       |__|__|__|__|__|/` (`\__/     '-'
				       |_|___|__|__/`      |
				-jgs---|__|___|__/`         \-------------------
				-.__.-.|___|___;`            |.__.-.__.-.__.-.__
				  |     |     ||             |  |     |     |
				-' '---' '---' \             /-' '---' '---' '--
				     |     |    '.        .' |     |     |     |
				'---' '---' '---' `-===-'`--' '---' '---' '---'
				  |     |     |     |     |     |     |     |
				-' '---' '---' '---' '---' '---' '---' '---' '--
				     |     |     |     |     |     |     |     |

				HOMEWORK -> Exploit ELFs, not elves

Name: Livadaru Alexandru-Valentin
Group: 323CA

	EXERCISE 1

=> 0x8048775 <main+103>:	call   0x8048680 <print_flag+207>

- The function from the 0x8048680 adress has a vulnerability.

- To be more specific, the following line:

0x8048698 <print_flag+231>:	mov    eax,DWORD PTR [ebp+0x8]

- I observed that the first argument of the function is a pointer to a function
	because the next instruction is "call eax" (which executes it).
- This instruction makes the program vulnerable because if we use a big enough
	payload, we can override the funtion called and replace it with 
	something else.
- This may change the behaviour of the program.

	EXERCISE 2

NICE_FLAG{9eb4d4f263a3a43e627f454242a08b99}

- To obtain this result I observed that every read function has 3 parameters.
- One of them was the the maximum read characters.
- There were 6 read functions, so I populated the payload with the chars
	so that the characters number would match the summed limits.
- And for the last read function, I summed the substracted number from esp with
	8 (ebp + 8) and put chars at the end of the payload and in the end the
	address (\xb1\x85\x04\x08).

	EXERCISE 3

=> 0x804883b <main+123>:	call   0x80486ac <print_flag+251>


- The function from the 0x80486ac adress has a vulnerability.

- To be more specific, the following line:

=> 0x80486d4 <print_flag+291>:	mov    eax,DWORD PTR [ebp+0x8]


- I observed that the first argument of the function is a pointer to a function
	because the next instruction is "call eax" (which executes it).
- This instruction makes the program vulnerable because if we use a big enough
	payload, we can override the funtion called and replace it with 
	something else.
- This may change the behaviour of the program.
- Below are some explanations of how I reached the problematic address.

NAUGHTY_FLAG{83c66f66779e30f4e421cb7153041782}

- To obtain this result I observed that every read function has 3 parameters.
- One of them was the the maximum read characters.
- There were 5 read functions, so I populated the payload with the chars so that
	I could reach the address in the stack from where the comparison with the
	specified cmp address started.
- Then I filled the stack with other chars until the number of characters read
	matched the number of chars introduced by me.
- I repeated the process until the 5th reading.
- I filled the stack with payload so that it would go past the cmp process.
- Then I filled the stack with chars until I reached ebp + 8 (first argument).
- Then I introduced the address of the necessary print. 

